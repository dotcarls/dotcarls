{
  "author": {
    "name": "Josh Hundley",
    "email": "josh.hundley@gmail.com",
    "url": "http://flightofthought.com"
  },
  "name": "mongoose-forms",
  "description": "Mongoose forms using Handlebars",
  "version": "0.0.5",
  "keywords": [
    "mongoose",
    "orm",
    "forms",
    "validation",
    "handlebars"
  ],
  "repository": {
    "url": "git://github.com/oJshua/mongoose-forms.git"
  },
  "engines": {
    "node": "~0.6.10"
  },
  "dependencies": {
    "underscore": ">=1.3.1",
    "validator": ">=0.4.2"
  },
  "devDependencies": {
    "expresso": ">=0.9.0",
    "should": ">=0.6.0",
    "mongoose": ">=2.5.10",
    "soupselect": ">=0.2.0",
    "handlebars": ">=1.0.4"
  },
  "main": "./index.js",
  "scripts": {
    "test": "expresso"
  },
  "readme": "# Mongoose Forms\n\nA form templating and validation library for Mongoose ODM using Handlebars templates and node validator\n\n## Installing\n\n    $ npm install mongoose-forms\n\n## Usage:\n\n### Create a Form from a Model - Simple\n\n```javascript\nvar Form    = require('mongoose-forms').Form;\nvar Model   = require('./lib/models/Model.js')\n\nvar form    = Form(Model); // Form fields will be generated from schema\n                           // with default values and type detection\n```\n\n### Render Using Handlebars\n\nRegister our helpers\n\n```javascript\nmongooseForms.bindHelpers(Handlebars, 'bootstrap'); // Using the bootstrap markup style\n```\n\nCall from inside template\n\n```html\n<div class=\"container\">\n    {{{renderForm formObject}}}\n</div>\n```\n\n### Save Model from Form (showing Express POST route) \n\n```javascript\nvar Bridge = require('mongoose-forms').Bridge;\n\napp.post('/site/create', function(req, res) {\n  \n  var form = SiteForm();\n\n  if(!form.isValid(req.body)) { ... Rerender form, automatically showing errors ... }\n\n  Bridge(new Site, form) // Bridge populates Model from Form\n    .getModel()\n    .save(function(err, site) { });\n});\n```\n\n### Populate Form from Model (showing Express GET route)\n\n```javascript\napp.get('/site/:id', function(req, res) {\n\n  Site.findById(req.params.id, function(err, site) {\n\n    var form = Bridge(site, new SiteForm).getForm(); // bridge populates Form from Model\n    \n    res.render('update', { form: form });\n  });\n});\n```\n\n### Create a Form from a Model - Advanced\n\n```javascript\nvar forms   = require('mongoose-forms');\nvar Site    = require('../models/Site.js')\n\nvar form = forms.Form(Site, {\n  renderOuter: true,          // render the form container\n  class: 'form-horizontal',   // give the form a class\n  legend: 'Site Name',        // render a legend (only if renderOuter: true)\n  maps: ['name', 'slug'],     // map only to these members of model\n  method: 'post',             // form method\n  fields: {\n    actions: {                // define custom fields that may or may not exist in your model\n      template: 'Actions',    // provide a template name\n      order: 100,             // order acts like a weight\n      buttons: [              // custom fields can take arbitrary data\n        {\n          type: 'submit',\n          label: 'Submit Form',\n          'class': 'btn-primary'\n        }\n      ]\n    },\n    name: { // We can define validation and return sanitized data (or return nothing to simply passthrough)\n      validate: function(value, check, sanitize) {\n        check(value, 'Must be at least 6 characters').len(6);\n        check(value, \"Can't be more than 15 characters\").len(6, 15);\n        return sanitize(value).xss().trim();\n      }\n    }\n  }\n});\n\n```\n\n### Simplify life with a builder (name it something like: forms/User.js)\n\n```javascript\nvar forms = require('mongoose-forms');\nvar User  = require('../models/User.js');\n\nmodule.exports = function() {\n  return forms.Form(User, {\n    method: 'post',\n    action: '/user/create',\n    maps: ['username', 'password'],\n    fields: {\n      password: {\n        template: 'Password',\n        validate: function(value, check) {\n          check(value, 'Minimum 6 characters and maximum 10').len(6, 10);\n        }\n      },\n      submit: {\n        template: 'Submit'\n      }\n    }\n  });\n}\n```\n\nThen include it in your program, and do stuff with it!\n\n```javascript\nvar Bridge      = require('mongoose-forms').Bridge;\n\nvar User        = require('./lib/models/User.js');\nvar UserForm    = require('./lib/forms/User.js');\n\n\nUser.find({ username: 'Foobar' }, function(err, user) {\n  renderSomeTemplate({\n    form: Bridge(user, new UserForm).getForm()\n  });\n});\n\n```\n\n## License\n\nCopyright (c) 2012 Josh Hundley &lt;josh.hundley@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "mongoose-forms@0.0.5",
  "dist": {
    "shasum": "1060cd0ab49bcf3c98f263a39003d7a619d91cb5"
  },
  "_from": "mongoose-forms@",
  "_resolved": "https://registry.npmjs.org/mongoose-forms/-/mongoose-forms-0.0.5.tgz"
}
